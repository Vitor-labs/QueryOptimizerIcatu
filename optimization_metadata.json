{
  "76c91f8e975289fc": {
    "query_sql": "-- example_queries/simple_select.sql\nSELECT \n    employee_id,\n    first_name,\n    last_name,\n    salary,\n    department_id\nFROM employees\nWHERE salary > 50000\n    AND salary > 40000 -- added redundancy for testing purpose\n    AND salary > 30000 -- added redundancy for testing purpose\n    AND department_id IN (10, 20, 30)\nORDER BY salary DESC;",
    "explanation_text": "This SQL query retrieves information about employees from the `employees` table. It selects the employee's ID, first name, last name, salary, and department ID. The query filters the results to include only employees whose salary is greater than 50000 (and redundantly also greater than 40000 and 30000) and who work in departments with IDs 10, 20, or 30. Finally, the results are ordered by salary in descending order, meaning the highest salaries appear first.\n",
    "version": "0.1",
    "last_optimization": "2025-07-10T22:19:26.036605",
    "database_type": "sqlite"
  },
  "f3e14dac8fa633d0": {
    "query_sql": "SELECT DISTINCT\n    (SELECT COUNT(*) FROM orders o1 WHERE o1.customer_id = c.customer_id) as total_orders,\n    (SELECT COUNT(*) FROM orders o2 WHERE o2.customer_id = c.customer_id AND o2.status = 'completed') as completed_orders,\n    (SELECT COUNT(*) FROM orders o3 WHERE o3.customer_id = c.customer_id AND o3.status = 'pending') as pending_orders,\n    (SELECT COUNT(*) FROM orders o4 WHERE o4.customer_id = c.customer_id AND o4.status = 'cancelled') as cancelled_orders,\n    (SELECT AVG(o5.total_amount) FROM orders o5 WHERE o5.customer_id = c.customer_id) as avg_order_value,\n    (SELECT MAX(o6.order_date) FROM orders o6 WHERE o6.customer_id = c.customer_id) as last_order_date,\n    (SELECT MIN(o7.order_date) FROM orders o7 WHERE o7.customer_id = c.customer_id) as first_order_date,\n    c.customer_id,\n    c.first_name,\n    c.last_name,\n    c.email,\n    c.phone,\n    c.address_line1,\n    c.address_line2,\n    c.city,\n    c.state,\n    c.zip_code,\n    c.country,\n    c.registration_date,\n    CASE \n        WHEN (SELECT COUNT(*) FROM orders o8 WHERE o8.customer_id = c.customer_id) > 50 THEN 'VIP'\n        WHEN (SELECT COUNT(*) FROM orders o9 WHERE o9.customer_id = c.customer_id) > 20 THEN 'Premium'\n        WHEN (SELECT COUNT(*) FROM orders o10 WHERE o10.customer_id = c.customer_id) > 5 THEN 'Regular'\n        ELSE 'New'\n    END as customer_tier,\n    (SELECT p.product_name \n     FROM order_items oi \n     JOIN products p ON oi.product_id = p.product_id \n     JOIN orders o11 ON oi.order_id = o11.order_id \n     WHERE o11.customer_id = c.customer_id \n     GROUP BY p.product_id, p.product_name \n     ORDER BY SUM(oi.quantity) DESC \n     LIMIT 1) as most_purchased_product,\n    (SELECT cat.category_name \n     FROM order_items oi2 \n     JOIN products p2 ON oi2.product_id = p2.product_id \n     JOIN categories cat ON p2.category_id = cat.category_id\n     JOIN orders o12 ON oi2.order_id = o12.order_id \n     WHERE o12.customer_id = c.customer_id \n     GROUP BY cat.category_id, cat.category_name \n     ORDER BY COUNT(*) DESC \n     LIMIT 1) as favorite_category,\n    (SELECT SUM(o13.total_amount) FROM orders o13 WHERE o13.customer_id = c.customer_id AND YEAR(o13.order_date) = 2023) as total_2023_spending,\n    (SELECT SUM(o14.total_amount) FROM orders o14 WHERE o14.customer_id = c.customer_id AND YEAR(o14.order_date) = 2022) as total_2022_spending,\n    (SELECT COUNT(*) FROM orders o15 WHERE o15.customer_id = c.customer_id AND MONTH(o15.order_date) = MONTH(CURDATE()) AND YEAR(o15.order_date) = YEAR(CURDATE())) as orders_this_month,\n    UPPER(CONCAT(c.first_name, ' ', c.last_name)) as full_name_upper,\n    LOWER(CONCAT(c.first_name, ' ', c.last_name)) as full_name_lower,\n    CONCAT(c.first_name, ' ', c.last_name) as full_name,\n    DATEDIFF(CURDATE(), c.registration_date) as days_since_registration,\n    DATEDIFF(CURDATE(), (SELECT MAX(o16.order_date) FROM orders o16 WHERE o16.customer_id = c.customer_id)) as days_since_last_order,\n    (SELECT shipping_address FROM orders o17 WHERE o17.customer_id = c.customer_id ORDER BY o17.order_date DESC LIMIT 1) as last_shipping_address,\n    (SELECT payment_method FROM orders o18 WHERE o18.customer_id = c.customer_id ORDER BY o18.order_date DESC LIMIT 1) as last_payment_method\nFROM customers c\nWHERE c.customer_id IN (\n    SELECT DISTINCT o19.customer_id \n    FROM orders o19 \n    WHERE o19.order_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\n)\nAND c.customer_id NOT IN (\n    SELECT DISTINCT o20.customer_id \n    FROM orders o20 \n    WHERE o20.status = 'fraud'\n)\nAND EXISTS (\n    SELECT 1 FROM orders o21 WHERE o21.customer_id = c.customer_id\n)\nAND c.email LIKE '%@%'\nAND LENGTH(c.phone) >= 10\nAND c.registration_date IS NOT NULL\nORDER BY \n    (SELECT COUNT(*) FROM orders o22 WHERE o22.customer_id = c.customer_id) DESC,\n    (SELECT SUM(o23.total_amount) FROM orders o23 WHERE o23.customer_id = c.customer_id) DESC,\n    c.registration_date DESC,\n    c.last_name ASC,\n    c.first_name ASC;",
    "explanation_text": "This SQL query retrieves detailed information about customers from the `customers` table, enriched with data from the `orders`, `order_items`, `products`, and `categories` tables. It calculates various customer statistics and returns a single row for each customer meeting specific criteria.\n\nHere's a breakdown:\n\n*   **Data Retrieved:** The query retrieves customer details (ID, name, contact info, address, registration date) along with calculated fields like total orders, completed/pending/cancelled orders, average order value, last/first order dates, customer tier (based on order count), most purchased product, favorite category, spending in 2022 and 2023, orders this month, full name variations, days since registration/last order, last shipping address, and last payment method.\n\n*   **Tables Involved:** `customers`, `orders`, `order_items`, `products`, and `categories`.\n\n*   **Key Conditions/Filters:**\n    *   Customers must have placed at least one order in the last two years.\n    *   Customers must not have any orders marked as \"fraud\".\n    *   Customers must have at least one order.\n    *   Customers must have a valid email address (containing \"@\").\n    *   Customers must have a phone number with at least 10 digits.\n    *   Customers must have a registration date.\n\n*   **Joins/Complex Operations:**\n    *   Multiple subqueries are used to calculate customer-specific statistics (order counts, averages, dates, etc.).\n    *   Joins are used to link `order_items` to `products` and `categories` to determine the most purchased product and favorite category.\n    *   A `CASE` statement assigns a customer tier based on the total number of orders.\n    *   `CONCAT`, `UPPER`, and `LOWER` functions are used to manipulate customer names.\n    *   `DATEDIFF` calculates the difference between dates.\n    *   `YEAR` and `MONTH` extract year and month from dates.\n\n*   **SQLite-Specific Features:**\n    *   `CURDATE()` returns the current date.\n    *   `DATE_SUB` subtracts an interval from a date.\n    *   `LIMIT 1` is used in subqueries to retrieve only the top result (e.g., most purchased product).\n\n*   **Ordering:** The results are ordered primarily by the number of orders (descending), then by total spending (descending), registration date (descending), last name (ascending), and finally first name (ascending).\n",
    "version": "0.0",
    "last_optimization": "2025-07-30T13:24:32.464303",
    "database_type": "sqlite"
  }
}